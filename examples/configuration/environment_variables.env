# AWS SSM Change Calendar 休業日スケジュール管理ツール
# 環境変数設定例

# =============================================================================
# AWS設定
# =============================================================================

# AWSリージョン
AWS_DEFAULT_REGION=ap-northeast-1
AWS_REGION=ap-northeast-1

# AWSプロファイル（オプション）
AWS_PROFILE=production

# AWS認証情報（プロファイル使用時は不要）
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# IAMロール（ECS/Lambda等で使用）
# AWS_ROLE_ARN=arn:aws:iam::123456789012:role/HolidayCalendarRole

# =============================================================================
# アプリケーション設定
# =============================================================================

# ログレベル (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# ログ形式 (simple, detailed, json, structured)
LOG_FORMAT=structured

# デバッグモード
DEBUG=false

# パフォーマンス監視
ENABLE_MONITORING=true

# =============================================================================
# カレンダー設定
# =============================================================================

# デフォルトタイムゾーン
TIMEZONE=Asia/Tokyo
DEFAULT_TIMEZONE=Asia/Tokyo

# 日曜祝日の除外 (true/false)
EXCLUDE_SUNDAY_HOLIDAYS=true

# 出力形式
OUTPUT_FORMAT=ics

# =============================================================================
# ファイル・ディレクトリ設定
# =============================================================================

# 出力ディレクトリ
OUTPUT_DIRECTORY=./output

# キャッシュディレクトリ
CACHE_DIRECTORY=~/.aws-ssm-calendar/cache

# 設定ファイルパス
CONFIG_FILE=./config/production.json

# ログファイルパス
LOG_FILE=./logs/holiday-calendar.log

# =============================================================================
# キャッシュ設定
# =============================================================================

# キャッシュ有効期限（日数）
CACHE_EXPIRY_DAYS=30

# 自動更新
AUTO_REFRESH_CACHE=false

# =============================================================================
# バッチ処理設定
# =============================================================================

# 並列処理
PARALLEL_PROCESSING=true

# 最大ワーカー数
MAX_WORKERS=4

# バッチサイズ
BATCH_SIZE=5

# =============================================================================
# セキュリティ設定
# =============================================================================

# HTTPS専用
HTTPS_ONLY=true

# 入力検証
VALIDATE_INPUTS=true

# セキュアファイル権限
SECURE_FILE_PERMISSIONS=true

# =============================================================================
# 監視・メトリクス設定
# =============================================================================

# メトリクス有効化
ENABLE_METRICS=true

# メトリクス送信先
METRICS_ENDPOINT=https://metrics.example.com/holiday-calendar

# アラート設定
ALERT_ON_ERRORS=true

# パフォーマンス閾値（秒）
MAX_GENERATION_TIME=30

# メモリ制限（MB）
MAX_MEMORY_USAGE=256

# =============================================================================
# 通知設定
# =============================================================================

# Slack Webhook URL
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR_TEAM_ID/YOUR_CHANNEL_ID/YOUR_WEBHOOK_TOKEN

# メール通知
EMAIL_NOTIFICATIONS=true
SMTP_SERVER=smtp.example.com
SMTP_PORT=587
SMTP_USERNAME=notifications@example.com
SMTP_PASSWORD=your-smtp-password
EMAIL_RECIPIENTS=admin@example.com,ops@example.com

# =============================================================================
# 開発環境用設定
# =============================================================================

# 開発モード
DEVELOPMENT_MODE=false

# テストデータ使用
USE_TEST_DATA=false

# モックAWSレスポンス
MOCK_AWS_RESPONSES=false

# 高速モード（テスト用）
FAST_MODE=false

# =============================================================================
# Docker環境用設定
# =============================================================================

# コンテナ内での実行
RUNNING_IN_CONTAINER=false

# ヘルスチェック
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_PORT=8080

# =============================================================================
# CI/CD環境用設定
# =============================================================================

# CI/CDモード
CI_CD_MODE=false

# ビルド番号
BUILD_NUMBER=${BUILD_NUMBER:-local}

# Git情報
GIT_COMMIT=${GIT_COMMIT:-unknown}
GIT_BRANCH=${GIT_BRANCH:-main}

# アーティファクト設定
GENERATE_CHECKSUMS=true
CREATE_MANIFEST=true
UPLOAD_TO_S3=false

# =============================================================================
# プロキシ設定
# =============================================================================

# HTTPプロキシ
# HTTP_PROXY=http://proxy.example.com:8080
# HTTPS_PROXY=http://proxy.example.com:8080

# プロキシ除外
# NO_PROXY=localhost,127.0.0.1,.example.com

# プロキシ認証
# PROXY_USERNAME=proxy-user
# PROXY_PASSWORD=proxy-password

# =============================================================================
# データベース設定（将来の拡張用）
# =============================================================================

# データベースURL
# DATABASE_URL=postgresql://user:password@localhost:5432/holiday_calendar

# Redis URL（分散キャッシュ用）
# REDIS_URL=redis://localhost:6379

# =============================================================================
# 外部サービス統合
# =============================================================================

# Jira統合
# JIRA_SERVER=https://example.atlassian.net
# JIRA_USERNAME=jira-user
# JIRA_API_TOKEN=your-jira-token
# JIRA_PROJECT_KEY=HCAL

# GitHub統合
# GITHUB_TOKEN=ghp_YOUR_GITHUB_TOKEN_HERE
# GITHUB_REPOSITORY=example/holiday-calendar

# =============================================================================
# 環境別設定例
# =============================================================================

# 本番環境
# ENVIRONMENT=production
# LOG_LEVEL=INFO
# DEBUG=false
# ENABLE_MONITORING=true
# EXCLUDE_SUNDAY_HOLIDAYS=false

# ステージング環境
# ENVIRONMENT=staging
# LOG_LEVEL=DEBUG
# DEBUG=true
# ENABLE_MONITORING=true
# EXCLUDE_SUNDAY_HOLIDAYS=true

# 開発環境
# ENVIRONMENT=development
# LOG_LEVEL=DEBUG
# DEBUG=true
# ENABLE_MONITORING=false
# USE_TEST_DATA=true

# テスト環境
# ENVIRONMENT=test
# LOG_LEVEL=WARNING
# DEBUG=false
# ENABLE_MONITORING=false
# MOCK_AWS_RESPONSES=true
# FAST_MODE=true

# =============================================================================
# 使用例
# =============================================================================

# 環境変数ファイルの読み込み方法:
# 
# 1. Bashでの読み込み:
#    source environment_variables.env
#    export $(grep -v '^#' environment_variables.env | xargs)
#
# 2. Dockerでの使用:
#    docker run --env-file environment_variables.env holiday-calendar-tool
#
# 3. Docker Composeでの使用:
#    env_file:
#      - environment_variables.env
#
# 4. Pythonでの読み込み:
#    from dotenv import load_dotenv
#    load_dotenv('environment_variables.env')
#
# 5. systemdサービスでの使用:
#    EnvironmentFile=/path/to/environment_variables.env

# =============================================================================
# セキュリティ注意事項
# =============================================================================

# 1. 本ファイルには機密情報を含めないでください
# 2. AWS認証情報は環境変数やIAMロールを使用してください
# 3. パスワードやトークンは別途セキュアに管理してください
# 4. 本番環境では適切なファイル権限を設定してください (600)
# 5. バージョン管理システムにコミットする前に機密情報を削除してください