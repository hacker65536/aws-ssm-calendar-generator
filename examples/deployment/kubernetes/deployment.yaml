apiVersion: apps/v1
kind: Deployment
metadata:
  name: holiday-calendar-app
  namespace: holiday-calendar
  labels:
    app: holiday-calendar
    component: app
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: holiday-calendar
      component: app
  template:
    metadata:
      labels:
        app: holiday-calendar
        component: app
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: holiday-calendar-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: holiday-calendar
        image: holiday-calendar:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: AWS_DEFAULT_REGION
          value: "ap-northeast-1"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_URL
          value: "redis://holiday-calendar-redis:6379"
        - name: CACHE_DIRECTORY
          value: "/app/cache"
        - name: OUTPUT_DIRECTORY
          value: "/app/output"
        - name: RUNNING_IN_CONTAINER
          value: "true"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: holiday-calendar-config
        - secretRef:
            name: holiday-calendar-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: cache-volume
          mountPath: /app/cache
        - name: output-volume
          mountPath: /app/output
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: aws-credentials
          mountPath: /home/appuser/.aws
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: cache-volume
        persistentVolumeClaim:
          claimName: holiday-calendar-cache-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: holiday-calendar-output-pvc
      - name: config-volume
        configMap:
          name: holiday-calendar-config-files
      - name: aws-credentials
        secret:
          secretName: aws-credentials
          defaultMode: 0600
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "holiday-calendar"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - holiday-calendar
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: holiday-calendar-service
  namespace: holiday-calendar
  labels:
    app: holiday-calendar
    component: app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: holiday-calendar
    component: app

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: holiday-calendar-config
  namespace: holiday-calendar
data:
  AWS_DEFAULT_REGION: "ap-northeast-1"
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  CACHE_EXPIRY_DAYS: "30"
  EXCLUDE_SUNDAY_HOLIDAYS: "true"
  ENABLE_MONITORING: "true"
  HEALTH_CHECK_ENABLED: "true"
  HEALTH_CHECK_PORT: "8080"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: holiday-calendar-config-files
  namespace: holiday-calendar
data:
  production.json: |
    {
      "aws": {
        "region": "ap-northeast-1",
        "profile": null
      },
      "calendar": {
        "default_timezone": "Asia/Tokyo",
        "exclude_sunday_holidays": true
      },
      "output": {
        "directory": "/app/output",
        "filename_template": "{calendar_name}_{date}.ics"
      },
      "logging": {
        "level": "INFO",
        "format": "json",
        "enable_performance_monitoring": true
      },
      "cache": {
        "directory": "/app/cache",
        "ttl_days": 30,
        "enabled": true
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: holiday-calendar-secrets
  namespace: holiday-calendar
type: Opaque
data:
  # Base64 encoded values
  SLACK_WEBHOOK_URL: ""
  SMTP_PASSWORD: ""
  DATABASE_PASSWORD: ""

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: holiday-calendar-cache-pvc
  namespace: holiday-calendar
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: holiday-calendar-output-pvc
  namespace: holiday-calendar
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: holiday-calendar-sa
  namespace: holiday-calendar
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/HolidayCalendarRole

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: holiday-calendar
  name: holiday-calendar-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: holiday-calendar-rolebinding
  namespace: holiday-calendar
subjects:
- kind: ServiceAccount
  name: holiday-calendar-sa
  namespace: holiday-calendar
roleRef:
  kind: Role
  name: holiday-calendar-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: holiday-calendar-ingress
  namespace: holiday-calendar
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - holiday-calendar.example.com
    secretName: holiday-calendar-tls
  rules:
  - host: holiday-calendar.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: holiday-calendar-service
            port:
              number: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: holiday-calendar-pdb
  namespace: holiday-calendar
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: holiday-calendar
      component: app

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: holiday-calendar-hpa
  namespace: holiday-calendar
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: holiday-calendar-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60