Metadata-Version: 2.4
Name: aws-ssm-calendar-ics-generator
Version: 1.0.0
Summary: AWS SSM Change Calendar 休業日スケジュール管理ツール
Author: AWS SSM Calendar ICS Generator Team
Author-email: your.email@example.com
License: MIT
Project-URL: Homepage, https://github.com/aws-ssm-calendar-ics-generator
Project-URL: Documentation, https://github.com/aws-ssm-calendar-ics-generator/docs
Project-URL: Repository, https://github.com/aws-ssm-calendar-ics-generator
Project-URL: Bug Tracker, https://github.com/aws-ssm-calendar-ics-generator/issues
Keywords: aws,ssm,change-calendar,ics,japanese-holidays
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: boto3>=1.26.0
Requires-Dist: icalendar>=5.0.0
Requires-Dist: click>=8.0.0
Requires-Dist: python-dateutil>=2.8.0
Requires-Dist: pytz>=2023.3
Requires-Dist: requests>=2.28.0
Requires-Dist: chardet>=5.0.0
Requires-Dist: psutil>=5.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.10.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Requires-Dist: bandit>=1.7.0; extra == "dev"
Requires-Dist: safety>=2.3.0; extra == "dev"
Requires-Dist: pre-commit>=3.0.0; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=7.0.0; extra == "test"
Requires-Dist: pytest-cov>=4.0.0; extra == "test"
Requires-Dist: pytest-mock>=3.10.0; extra == "test"
Provides-Extra: lint
Requires-Dist: black>=23.0.0; extra == "lint"
Requires-Dist: isort>=5.12.0; extra == "lint"
Requires-Dist: flake8>=6.0.0; extra == "lint"
Requires-Dist: mypy>=1.0.0; extra == "lint"
Provides-Extra: security
Requires-Dist: bandit>=1.7.0; extra == "security"
Requires-Dist: safety>=2.3.0; extra == "security"
Dynamic: author-email
Dynamic: requires-python

# AWS SSM Change Calendar 休業日スケジュール管理ツール

[![Python Version](https://img.shields.io/badge/python-3.8%2B-blue.svg)](https://www.python.org/downloads/)
[![License](https://img.shields.io/badge/license-MIT-green.svg)](LICENSE)
[![AWS](https://img.shields.io/badge/AWS-SSM%20Change%20Calendar-orange.svg)](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html)

AWS Systems Manager Change Calendarに日本の祝日を含む休業日スケジュールを効率的に設定するための包括的なツールです。

## 🎯 概要

このツールは、日本の企業や組織がAWS環境でのシステム運用において、祝日期間中の自動デプロイメントやシステム変更を適切に制御するために開発されました。

### 主要な目的
- **祝日データ管理**: 内閣府公式データから日本の祝日を自動取得・管理
- **AWS統合**: AWS SSM Change Calendarに祝日を休業日として自動設定
- **標準形式対応**: iCalendar 2.0 (ICS)形式での祝日データエクスポート
- **運用自動化**: 祝日期間中のシステム変更・デプロイメントを自動防止
- **比較・解析**: ICSファイルやAWS Change Calendarの内容解析・比較機能

### 🌟 特徴
- ✅ **信頼性の高いデータソース**: 内閣府公式CSV（一次ソース）を使用
- ✅ **自動キャッシュ機能**: 30日間の有効期限付きローカルキャッシュ
- ✅ **AWS完全対応**: Change Calendar作成・更新・削除・比較
- ✅ **多様な出力形式**: ICS、JSON、CSV、人間可読形式
- ✅ **高度な比較機能**: 意味的差分検出、時系列ソート
- ✅ **包括的なエラーハンドリング**: ネットワーク障害、認証エラー等に対応
- ✅ **パフォーマンス最適化**: メモリ効率、高速検索、バッチ処理

## 🚀 主要機能

### 1. 日本祝日データ管理
- **📊 データソース**: 内閣府公式CSV（https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv）
- **🎯 対象期間**: 当年以降の祝日データ（自動フィルタリング）
- **💾 キャッシュシステム**: 30日間の有効期限付き自動キャッシュ
- **🔒 データ整合性**: 公式データのみ使用、厳格な検証
- **🌐 エンコーディング**: Shift_JIS/CP932からUTF-8への自動変換
- **📅 日曜祝日フィルタ**: 日曜日の祝日除外オプション（デフォルト有効）

### 2. AWS SSM Change Calendar統合
- **🆕 カレンダー管理**: 新規作成・更新・削除の完全サポート
- **🔍 比較・解析**: 既存Change Calendarとの詳細比較
- **🔐 権限管理**: 最小権限原則に基づくIAMポリシー
- **🛠️ エラーハンドリング**: 包括的なエラー処理とトラブルシューティング
- **📊 状態監視**: Change Calendarの現在状態（OPEN/CLOSED）確認
- **🔄 バッチ処理**: 複数カレンダーの一括操作

### 3. ICS形式エクスポート・解析
- **📋 標準準拠**: RFC 5545 iCalendar 2.0完全対応
- **🎯 AWS専用**: Change Calendar専用フォーマット生成
- **🌐 文字エンコーディング**: UTF-8エンコーディング完全対応
- **🔍 解析機能**: ICSファイルの構造化解析・統計生成
- **📊 比較機能**: 意味的差分検出、時系列ソート表示
- **📤 多様な出力**: 人間可読、JSON、CSV形式対応

### 4. 高度な比較・解析機能
- **🔍 意味的差分**: イベント単位での詳細変更検出
- **📅 時系列ソート**: 日付順での差分表示
- **🎨 カラー出力**: 変更種別別のANSIカラーコード表示
- **📊 統計情報**: 追加・削除・変更・移動の詳細統計
- **🔗 AWS統合比較**: ローカルICSとAWS Change Calendarの比較
- **📁 バッチ比較**: 複数ファイル・カレンダーの一括比較

## 🛠️ 技術スタック

| カテゴリ | 技術・ライブラリ | バージョン | 用途 |
|---------|----------------|-----------|------|
| **言語** | Python | 3.8+ | メイン開発言語 |
| **AWS SDK** | boto3 | ≥1.26.0 | AWS API操作 |
| **カレンダー** | icalendar | ≥5.0.0 | ICS生成・解析 |
| **CLI** | click | ≥8.0.0 | コマンドライン インターフェース |
| **HTTP** | requests | ≥2.28.0 | 祝日データ取得 |
| **エンコーディング** | chardet | ≥5.0.0 | 文字エンコーディング検出 |
| **日時処理** | pytz | ≥2022.1 | タイムゾーン処理 |
| **日付解析** | python-dateutil | ≥2.8.0 | 柔軟な日付解析 |

### アーキテクチャ概要
```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   CLI Interface │    │  Business Logic │    │   Data Sources  │
│                 │    │                 │    │                 │
│ • コマンド処理   │───▶│ • 祝日管理      │───▶│ • 内閣府CSV     │
│ • オプション解析 │    │ • ICS生成       │    │ • AWS SSM       │
│ • 結果表示      │    │ • AWS統合       │    │ • ローカルキャッシュ │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## インストールとセットアップ

### システム要件

- **Python**: 3.8以上（推奨: 3.11以上）
- **OS**: Windows 10/11, macOS 10.15+, Linux (Ubuntu 18.04+)
- **メモリ**: 最小512MB、推奨1GB以上
- **ディスク容量**: 100MB以上の空き容量
- **ネットワーク**: インターネット接続（祝日データ取得用）

### 1. プロジェクトの取得

```bash
# GitHubからクローン
git clone https://github.com/your-org/aws-ssm-calendar-ics-generator.git
cd aws-ssm-calendar-ics-generator

# または、リリース版をダウンロード
wget https://github.com/your-org/aws-ssm-calendar-ics-generator/archive/v1.0.0.tar.gz
tar -xzf v1.0.0.tar.gz
cd aws-ssm-calendar-ics-generator-1.0.0
```

### 2. Python環境のセットアップ

#### 仮想環境の作成（推奨）

```bash
# Python仮想環境の作成
python -m venv .venv

# 仮想環境の有効化
# Windows
.venv\Scripts\activate
# macOS/Linux
source .venv/bin/activate
```

#### 依存関係のインストール

```bash
# 必要なパッケージをインストール
pip install -r requirements.txt

# 開発用パッケージも含める場合（オプション）
pip install -r requirements-dev.txt
```

### 3. AWS認証設定

#### 方法1: AWS CLI使用（推奨）

```bash
# AWS CLIのインストール（未インストールの場合）
pip install awscli

# 認証情報の設定
aws configure
# AWS Access Key ID: [your-access-key]
# AWS Secret Access Key: [your-secret-key]
# Default region name: ap-northeast-1
# Default output format: json
```

#### 方法2: 環境変数設定

```bash
# 基本認証情報
export AWS_ACCESS_KEY_ID="your-access-key"
export AWS_SECRET_ACCESS_KEY="your-secret-key"
export AWS_DEFAULT_REGION="ap-northeast-1"

# セッショントークン使用時（一時的な認証情報）
export AWS_SESSION_TOKEN="your-session-token"
```

#### 方法3: AWS SSOプロファイル

```bash
# AWS SSOの設定
aws configure sso
# SSO start URL: https://your-org.awsapps.com/start
# SSO region: us-east-1
# Account ID: 123456789012
# Role name: PowerUserAccess
# CLI default client Region: ap-northeast-1
# CLI default output format: json
# CLI profile name: your-sso-profile

# プロファイルの使用
export AWS_PROFILE="your-sso-profile"
```

### 4. IAM権限の設定

#### 最小権限ポリシー（読み取り専用）

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:GetDocument",
        "ssm:ListDocuments",
        "ssm:GetCalendarState",
        "ssm:DescribeParameters"
      ],
      "Resource": "*"
    }
  ]
}
```

#### 完全機能ポリシー（作成・更新・削除）

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:CreateDocument",
        "ssm:UpdateDocument",
        "ssm:DeleteDocument",
        "ssm:GetDocument",
        "ssm:ListDocuments",
        "ssm:GetCalendarState",
        "ssm:DescribeParameters",
        "ssm:AddTagsToResource",
        "ssm:RemoveTagsFromResource"
      ],
      "Resource": "*"
    }
  ]
}
```

### 5. 初期設定と動作確認

#### 設定ファイルの作成（オプション）

```bash
# 設定ディレクトリの作成
mkdir -p ~/.aws-ssm-calendar

# 設定ファイルの作成
cat > ~/.aws-ssm-calendar/config.json << EOF
{
  "aws": {
    "region": "ap-northeast-1",
    "profile": null
  },
  "calendar": {
    "default_timezone": "Asia/Tokyo",
    "exclude_sunday_holidays": true
  },
  "output": {
    "directory": "./output",
    "filename_template": "{calendar_name}_{date}.ics"
  },
  "cache": {
    "enabled": true,
    "ttl_days": 30,
    "directory": "~/.aws-ssm-calendar/cache"
  }
}
EOF
```

#### 動作確認

```bash
# ヘルプの表示
python main.py --help

# 祝日データの初期化
python main.py refresh-holidays

# 今年の祝日一覧表示（クリーンな出力）
python main.py holidays

# AWS接続テスト
python main.py list-calendars

# 簡単なICSファイル生成テスト
python main.py holidays --output test_holidays.ics

# 詳細情報付きで実行（トラブルシューティング用）
python main.py --log-level INFO --enable-monitoring holidays
```

**ヘルプ出力例:**
```
Usage: main.py [OPTIONS] COMMAND [ARGS]...

  AWS SSM Change Calendar to ICS converter with Japanese holidays support.

Options:
  -c, --config TEXT               Configuration file path
  -p, --profile TEXT              AWS profile name
  -r, --region TEXT               AWS region
  --debug                         Enable debug mode with verbose logging
  --log-level [DEBUG|INFO|WARNING|ERROR|CRITICAL]
                                  Set logging level (default: WARNING)
  --log-format [simple|detailed|json|structured]
                                  Set log format (default: simple)
  --enable-monitoring             Enable performance and system monitoring
  --help                          Show this message and exit.

Commands:
  holidays           Show or export Japanese holidays
  list-calendars     List all Change Calendars
  create-calendar    Create a new Change Calendar with Japanese holidays
  export             Export change calendar to ICS file
  ...
```

### 6. トラブルシューティング

#### よくある問題と解決方法

**Python バージョンエラー**
```bash
# Python バージョン確認
python --version
# Python 3.8以上が必要

# 複数バージョンがインストールされている場合
python3.11 -m venv .venv
```

**依存関係インストールエラー**
```bash
# pipのアップグレード
pip install --upgrade pip

# 個別パッケージのインストール
pip install boto3 icalendar click requests chardet pytz python-dateutil
```

**AWS認証エラー**
```bash
# 認証情報の確認
aws sts get-caller-identity

# プロファイル一覧確認
aws configure list-profiles

# 認証情報のテスト
python -c "import boto3; print(boto3.Session().get_credentials())"
```

**ネットワーク接続エラー**
```bash
# 内閣府サーバーへの接続テスト
curl -I https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv

# プロキシ設定（必要な場合）
export HTTP_PROXY="http://proxy.company.com:8080"
export HTTPS_PROXY="http://proxy.company.com:8080"
```

## 🚀 クイックスタート

### ⚡ 新しいデフォルト設定（v1.1.0以降）

このツールは、より使いやすくするためにデフォルト設定を改善しました：

| 設定項目 | 旧デフォルト | 新デフォルト | 理由 |
|---------|-------------|-------------|------|
| ログレベル | `INFO` | `WARNING` | クリーンな出力 |
| ログフォーマット | `structured` | `simple` | 読みやすさ向上 |
| システムモニタリング | `有効` | `無効` | 不要な情報を非表示 |

**移行ガイド:**
- 従来の詳細出力が必要な場合: `--log-level INFO --enable-monitoring` を追加
- 開発・デバッグ時: `--debug --log-level DEBUG --log-format structured --enable-monitoring` を使用

### 30秒で始める

```bash
# 1. リポジトリをクローン
git clone https://github.com/your-org/aws-ssm-calendar-ics-generator.git
cd aws-ssm-calendar-ics-generator

# 2. 仮想環境をセットアップ
python -m venv .venv
source .venv/bin/activate  # Linux/macOS
# .venv\Scripts\activate   # Windows

# 3. 依存関係をインストール
pip install -r requirements.txt

# 4. AWS認証を設定
aws configure

# 5. 祝日データを初期化
python main.py refresh-holidays

# 6. 今年の祝日を確認
python main.py holidays
```

### 基本的な使用例

#### 📅 祝日データの管理
```bash
# 今年の祝日一覧を表示
python main.py holidays

# 特定年の祝日を表示
python main.py holidays --year 2025

# 祝日をICSファイルでエクスポート
python main.py holidays --year 2024 --output holidays_2024.ics

# 今日が祝日かチェック
python main.py check-holiday

# 特定日が祝日かチェック
python main.py check-holiday --date 2024-11-03
```

#### ☁️ AWS Change Calendar操作
```bash
# 利用可能なChange Calendarを一覧表示
python main.py list-calendars

# 新しいChange Calendarを作成
python main.py create-calendar japanese-holidays-2024 --year 2024

# Change CalendarをICSファイルにエクスポート
python main.py export japanese-holidays-2024 --output calendar.ics

# Change Calendarを更新
python main.py update-calendar japanese-holidays-2024 --year 2025

# Change Calendarを削除
python main.py delete-calendar old-calendar
```

#### 🔍 ICS解析・比較
```bash
# ICSファイルを解析
python main.py analyze-ics holidays.ics

# 2つのICSファイルを比較
python main.py compare-ics file1.ics file2.ics

# 意味的差分で比較（推奨）
python main.py compare-ics old.ics new.ics --format semantic --color

# AWS Change Calendarを解析
python main.py analyze-calendar japanese-holidays-2024

# 複数のChange Calendarを比較
python main.py compare-calendars cal1 cal2 cal3
```

### 🎯 実用的な使用例

#### シナリオ1: 年次祝日カレンダーの作成
```bash
# 2024年の祝日カレンダーを作成し、AWS Change Calendarに設定
python main.py holidays --year 2024 --output holidays_2024.ics
python main.py create-calendar japanese-holidays-2024 --year 2024
python main.py analyze-calendar japanese-holidays-2024
```

#### シナリオ2: 複数年のカレンダー管理
```bash
# 2024-2026年の祝日カレンダーを一括作成
for year in 2024 2025 2026; do
    python main.py create-calendar japanese-holidays-$year --year $year
    echo "Created calendar for $year"
done

# 作成されたカレンダーを確認
python main.py list-calendars
```

#### シナリオ3: カレンダーの更新と比較
```bash
# 既存カレンダーをバックアップ
python main.py export japanese-holidays-2024 --output backup_2024.ics

# 新しい祝日データで更新
python main.py refresh-holidays
python main.py update-calendar japanese-holidays-2024 --year 2024

# 更新前後の比較
python main.py export japanese-holidays-2024 --output updated_2024.ics
python main.py compare-ics backup_2024.ics updated_2024.ics --format semantic --color
```

#### シナリオ4: 日曜祝日の管理
```bash
# 日曜祝日を除外したカレンダー（デフォルト）
python main.py holidays --year 2024 --output holidays_exclude_sunday.ics

# 日曜祝日を含むカレンダー
python main.py holidays --year 2024 --no-exclude-sunday --output holidays_include_sunday.ics

# 2つのバージョンを比較
python main.py compare-ics holidays_exclude_sunday.ics holidays_include_sunday.ics --format semantic
```

#### シナリオ5: 運用環境での定期メンテナンス
```bash
#!/bin/bash
# monthly_maintenance.sh - 月次メンテナンススクリプト

echo "=== 月次祝日カレンダーメンテナンス ==="

# 祝日データの更新
python main.py refresh-holidays

# 現在年と翌年のカレンダー更新
current_year=$(date +%Y)
next_year=$((current_year + 1))

python main.py update-calendar japanese-holidays-$current_year --year $current_year
python main.py update-calendar japanese-holidays-$next_year --year $next_year

# システム状態確認
python main.py system-metrics

echo "=== メンテナンス完了 ==="
```

### 🔧 高度なオプション

#### デフォルト設定について

このツールは、一般的なCLIツールの慣例に従い、デフォルトではクリーンで読みやすい出力を提供します：

- **ログレベル**: `WARNING`（警告以上のメッセージのみ表示）
- **ログフォーマット**: `simple`（シンプルなテキスト形式）
- **システムモニタリング**: `無効`（パフォーマンス情報を非表示）

詳細な情報が必要な場合は、以下のオプションで有効化できます：

```bash
# 通常使用（クリーンな出力）
python main.py holidays

# 詳細情報付き（トラブルシューティング用）
python main.py --log-level INFO --enable-monitoring holidays

# 開発者向け（最大詳細）
python main.py --debug --log-level DEBUG --log-format structured --enable-monitoring holidays
```

#### グローバルオプション
```bash
# AWSプロファイル指定
python main.py --profile production holidays

# AWSリージョン指定
python main.py --region us-east-1 list-calendars

# デバッグモード（詳細ログ表示）
python main.py --debug --log-level DEBUG holidays

# 設定ファイル指定
python main.py --config /path/to/config.json holidays

# パフォーマンス監視有効化（デフォルトは無効）
python main.py --enable-monitoring holidays

# 詳細ログ表示（デフォルトはWARNINGレベル）
python main.py --log-level INFO holidays

# 構造化ログ形式（デフォルトはsimple）
python main.py --log-format structured holidays
```

#### 出力形式のカスタマイズ
```bash
# JSON形式で出力
python main.py holidays --format json --output holidays.json

# CSV形式で出力
python main.py holidays --format csv --output holidays.csv

# 簡易形式で表示
python main.py analyze-ics holidays.ics --format simple

# カラー出力で比較
python main.py compare-ics file1.ics file2.ics --color --format semantic

# 詳細ログ付きで実行（トラブルシューティング用）
python main.py --log-level INFO --log-format structured --enable-monitoring holidays
```

## 📊 出力例

### 祝日一覧表示（テーブル形式）
```
🎌 Japanese holidays for 2024:
┌────────────┬─────────────┬──────────────────┬──────────┐
│ Date       │ Weekday     │ Holiday Name     │ Type     │
├────────────┼─────────────┼──────────────────┼──────────┤
│ 2024-01-01 │ Monday      │ 元日             │ 祝日     │
│ 2024-01-08 │ Monday      │ 成人の日         │ 祝日     │
│ 2024-02-11 │ Sunday      │ 建国記念の日     │ 祝日     │
│ 2024-02-12 │ Monday      │ 振替休日         │ 振替     │
│ 2024-02-23 │ Friday      │ 天皇誕生日       │ 祝日     │
│ 2024-03-20 │ Wednesday   │ 春分の日         │ 祝日     │
│ 2024-04-29 │ Monday      │ 昭和の日         │ 祝日     │
│ 2024-05-03 │ Friday      │ 憲法記念日       │ 祝日     │
│ 2024-05-04 │ Saturday    │ みどりの日       │ 祝日     │
│ 2024-05-05 │ Sunday      │ こどもの日       │ 祝日     │
│ 2024-05-06 │ Monday      │ 振替休日         │ 振替     │
└────────────┴─────────────┴──────────────────┴──────────┘

📈 Statistics:
- Total holidays: 16
- Weekend holidays: 4 (25.0%)
- Weekday holidays: 12 (75.0%)
- Substitute holidays: 2
- Date range: 2024-01-01 to 2024-11-04
```

### ICS解析結果（詳細形式）
```
📋 ICS File Analysis: japanese_holidays_2024.ics

📊 File Information:
- File size: 11,139 bytes
- Total events: 37
- Date range: 2024-01-01 to 2026-05-03
- Encoding: UTF-8
- Format: RFC 5545 compliant

📅 Event Statistics:
- 2024: 16 events
- 2025: 16 events  
- 2026: 5 events

🏷️ Categories:
- Japanese-Holiday: 37 events (100%)

✅ Validation Results:
- Format errors: 0
- Missing properties: 0
- Invalid dates: 0
- Duplicate UIDs: 0

📋 Recent Events:
2024-01-01 | 元日 | P1D
2024-01-08 | 成人の日 | P1D
2024-02-11 | 建国記念の日 | P1D
2024-02-12 | 振替休日 | P1D
2024-02-23 | 天皇誕生日 | P1D
```

### ICS比較結果（意味的差分）
```diff
🔍 ICSイベント意味的差分

📁 File Comparison:
ファイル1: japanese_holidays_2025.ics (37イベント)
ファイル2: japanese_holidays_2025_exclude_sunday.ics (33イベント)

📊 Change Summary:
+ 追加: 0 イベント
- 削除: 4 イベント  
~ 変更: 0 イベント
= 移動: 0 イベント
Δ 期間変更: 0 イベント

📅 Detailed Changes (時系列順):

- [削除] 2025-02-23 天皇誕生日
  UID: jp-holiday-20250223@aws-ssm-change-calendar
  期間: 2025-02-23 00:00 - 2025-02-24 00:00
  説明: 国民の祝日（日曜日）

- [削除] 2025-05-04 みどりの日  
  UID: jp-holiday-20250504@aws-ssm-change-calendar
  期間: 2025-05-04 00:00 - 2025-05-05 00:00
  説明: 国民の祝日（日曜日）

- [削除] 2025-11-23 勤労感謝の日
  UID: jp-holiday-20251123@aws-ssm-change-calendar
  期間: 2025-11-23 00:00 - 2025-11-24 00:00
  説明: 国民の祝日（日曜日）

- [削除] 2026-05-03 憲法記念日
  UID: jp-holiday-20260503@aws-ssm-change-calendar
  期間: 2026-05-03 00:00 - 2026-05-04 00:00
  説明: 国民の祝日（日曜日）

💡 Summary: 日曜日に該当する4件の祝日が除外されています
```

### AWS Change Calendar比較結果
```diff
☁️ AWS Change Calendar Comparison

📊 Comparison Details:
ローカルファイル: japanese_holidays_2025.ics (37イベント)
AWS Change Calendar: japanese-holidays-2025 (33イベント, 状態: OPEN)
リージョン: ap-northeast-1
最終更新: 2024-10-29T12:34:56Z

📈 Change Statistics:
+ ローカルのみ: 4 イベント
- AWSのみ: 0 イベント  
~ 差異: 0 イベント
= 移動: 0 イベント

🔍 Detailed Differences:

+ [ローカルのみ] 2025-02-23 天皇誕生日
  → AWS Change Calendarに追加推奨

+ [ローカルのみ] 2025-05-04 みどりの日
  → AWS Change Calendarに追加推奨

💡 Recommended Actions:
1. 4件のローカルイベントをAWS Change Calendarに追加
2. AWS Change Calendarの更新後、状態確認を実施
3. 次回比較: 2025-11-01（推奨）
```

## 📚 ドキュメント

### 🚀 ユーザーガイド
| ドキュメント | 説明 | 対象者 |
|-------------|------|--------|
| **[📖 インストールとセットアップガイド](docs/installation_and_setup_guide.md)** | 詳細なインストール手順、環境設定、初期セットアップ | 初心者〜中級者 |
| **[⌨️ コマンドライン使用ドキュメント](docs/command_line_reference.md)** | 全コマンドの詳細説明、オプション、使用例 | 全ユーザー |
| **[💡 使用ガイドとベストプラクティス](docs/usage_guide_and_best_practices.md)** | 実用的な使用例、運用のベストプラクティス | 中級者〜上級者 |
| **[🔧 トラブルシューティングとFAQ](docs/troubleshooting_and_faq.md)** | 問題解決ガイド、よくある質問と回答 | 全ユーザー |
| **[📋 ユーザーマニュアル](docs/user_manual.md)** | 包括的なユーザーマニュアル | 全ユーザー |

### 🛠️ 技術資料
| ドキュメント | 説明 | 対象者 |
|-------------|------|--------|
| **[🔌 API リファレンス](docs/comprehensive_api_reference.md)** | プログラマー向けAPI仕様、関数・クラス詳細 | 開発者 |
| **[🏗️ 技術仕様書](docs/technical_specification.md)** | システム設計詳細、アーキテクチャ説明 | 開発者・アーキテクト |
| **[🎌 日本の祝日取得機能 仕様書](docs/japanese_holidays_specification.md)** | 祝日データ仕様、取得ロジック詳細 | 開発者 |

### 📋 設計・要件資料
| ドキュメント | 説明 | 対象者 |
|-------------|------|--------|
| **[📝 要件定義書](.kiro/specs/aws-ssm-calendar-ics-generator/requirements.md)** | システム要件、EARS準拠の要件仕様 | PM・開発者 |
| **[🎨 設計書](.kiro/specs/aws-ssm-calendar-ics-generator/design.md)** | アーキテクチャ設計、コンポーネント設計 | アーキテクト・開発者 |
| **[✅ 実装計画](.kiro/specs/aws-ssm-calendar-ics-generator/tasks.md)** | 開発タスク、実装進捗管理 | 開発者・PM |

### 📁 サンプル・テンプレート
| リソース | 説明 | 用途 |
|---------|------|------|
| **[📂 基本使用例](examples/basic_usage/)** | シンプルな使用例、入門者向けサンプル | 学習・テスト |
| **[🔧 高度な使用例](examples/advanced_usage/)** | 複雑なシナリオ、バッチ処理例 | 実用・自動化 |
| **[⚙️ 設定例](examples/configuration/)** | 設定ファイル、環境変数、IAMポリシー例 | セットアップ |
| **[🔗 統合例](examples/integration_examples/)** | CI/CD、Terraform統合例 | DevOps・自動化 |

### 🎯 クイックリンク
- 🚀 **[30秒クイックスタート](#-クイックスタート)** - すぐに始めたい方
- 🔧 **[トラブルシューティング](docs/troubleshooting_and_faq.md#クイック診断)** - 問題が発生した方
- 📖 **[コマンドリファレンス](docs/command_line_reference.md#コマンド一覧)** - コマンドを調べたい方
- 💡 **[ベストプラクティス](docs/usage_guide_and_best_practices.md)** - 効率的に使いたい方
- 🔌 **[API仕様](docs/comprehensive_api_reference.md)** - プログラムで使いたい方

## クイックトラブルシューティング

### よくある問題

1. **AWS認証エラー**
   ```bash
   # 認証情報の確認
   aws sts get-caller-identity
   
   # 認証情報の設定
   aws configure
   ```

2. **祝日データ取得エラー**
   ```bash
   # ネットワーク接続確認
   curl -I https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv
   
   # プロキシ設定（必要な場合）
   export HTTP_PROXY="http://proxy:8080"
   ```

3. **Python環境エラー**
   ```bash
   # Python バージョン確認
   python --version  # 3.8以上が必要
   
   # 仮想環境の有効化
   source .venv/bin/activate
   
   # 依存関係の再インストール
   pip install -r requirements.txt
   ```

4. **権限エラー**
   ```bash
   # 出力ディレクトリの作成
   mkdir -p ./output
   chmod 755 ./output
   
   # 設定ディレクトリの権限確認
   ls -la ~/.aws-ssm-calendar/
   ```

### 1分間診断

問題が発生した場合、以下のコマンドで迅速に診断できます：

```bash
# クイック診断スクリプト
curl -s https://raw.githubusercontent.com/your-org/aws-ssm-calendar-ics-generator/main/scripts/quick_diagnosis.sh | bash
```

詳細なトラブルシューティングについては、[トラブルシューティングガイド](docs/troubleshooting_and_faq.md)を参照してください。

## 開発・テスト

### テストスクリプト
```bash
# 基本機能テスト
python test_holidays.py

# デバッグ情報表示
python debug_holidays.py

# 簡易動作確認
python quick_test.py 2024
```

## ドキュメント

### 仕様書
- [要件定義書](.kiro/specs/aws-ssm-calendar-ics-generator/requirements.md)
- [設計書](.kiro/specs/aws-ssm-calendar-ics-generator/design.md)
- [実装計画](.kiro/specs/aws-ssm-calendar-ics-generator/tasks.md)

### 技術資料
- [日本の祝日取得機能 仕様書](docs/japanese_holidays_specification.md)
- [技術仕様書](docs/technical_specification.md)
- [API リファレンス](docs/api_reference.md)

## ライセンス

MIT License

## 貢献

プルリクエストやイシューの報告を歓迎します。
