version: '3.8'

services:
  # Main application service
  holiday-calendar:
    build:
      context: ../../..
      dockerfile: examples/deployment/docker/Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${GIT_COMMIT:-unknown}
        VERSION: ${VERSION:-latest}
    image: holiday-calendar:${VERSION:-latest}
    container_name: holiday-calendar-app
    restart: unless-stopped
    environment:
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-northeast-1}
      - AWS_PROFILE=${AWS_PROFILE:-}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CACHE_DIRECTORY=/app/cache
      - OUTPUT_DIRECTORY=/app/output
      - REDIS_URL=redis://redis:6379
    volumes:
      - holiday_output:/app/output
      - holiday_cache:/app/cache
      - holiday_logs:/app/logs
      - ./config:/app/config:ro
      - ~/.aws:/home/appuser/.aws:ro
    networks:
      - holiday-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: holiday-calendar-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - holiday-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web API service (optional)
  api:
    build:
      context: ../../..
      dockerfile: examples/deployment/docker/Dockerfile.api
    image: holiday-calendar-api:${VERSION:-latest}
    container_name: holiday-calendar-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-northeast-1}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://holiday:password@postgres:5432/holiday_calendar
    volumes:
      - ./config:/app/config:ro
      - ~/.aws:/home/appuser/.aws:ro
    networks:
      - holiday-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (for API service)
  postgres:
    image: postgres:15-alpine
    container_name: holiday-calendar-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=holiday_calendar
      - POSTGRES_USER=holiday
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - holiday-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U holiday -d holiday_calendar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: holiday-calendar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - holiday-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: holiday-calendar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - holiday-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: holiday-calendar-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - holiday-network
    depends_on:
      - prometheus

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: holiday-calendar-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - holiday-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: holiday-calendar-logstash
    restart: unless-stopped
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - holiday_logs:/app/logs:ro
    networks:
      - holiday-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: holiday-calendar-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - holiday-network
    depends_on:
      - elasticsearch

  # Backup service
  backup:
    build:
      context: ../../..
      dockerfile: examples/deployment/docker/Dockerfile.backup
    image: holiday-calendar-backup:${VERSION:-latest}
    container_name: holiday-calendar-backup
    restart: unless-stopped
    environment:
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-ap-northeast-1}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET:-holiday-calendar-backups}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - holiday_output:/backup/output:ro
      - holiday_cache:/backup/cache:ro
      - postgres_data:/backup/database:ro
      - ~/.aws:/home/appuser/.aws:ro
    networks:
      - holiday-network
    depends_on:
      - postgres

networks:
  holiday-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  holiday_output:
    driver: local
  holiday_cache:
    driver: local
  holiday_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local